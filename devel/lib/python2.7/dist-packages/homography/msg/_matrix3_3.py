# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from homography/matrix3_3.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class matrix3_3(genpy.Message):
  _md5sum = "d934169a54456b96185ffceeb96721ab"
  _type = "homography/matrix3_3"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 e00
float64 e01
float64 e02
float64 e10
float64 e11
float64 e12
float64 e20
float64 e21
float64 e22

"""
  __slots__ = ['e00','e01','e02','e10','e11','e12','e20','e21','e22']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       e00,e01,e02,e10,e11,e12,e20,e21,e22

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(matrix3_3, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.e00 is None:
        self.e00 = 0.
      if self.e01 is None:
        self.e01 = 0.
      if self.e02 is None:
        self.e02 = 0.
      if self.e10 is None:
        self.e10 = 0.
      if self.e11 is None:
        self.e11 = 0.
      if self.e12 is None:
        self.e12 = 0.
      if self.e20 is None:
        self.e20 = 0.
      if self.e21 is None:
        self.e21 = 0.
      if self.e22 is None:
        self.e22 = 0.
    else:
      self.e00 = 0.
      self.e01 = 0.
      self.e02 = 0.
      self.e10 = 0.
      self.e11 = 0.
      self.e12 = 0.
      self.e20 = 0.
      self.e21 = 0.
      self.e22 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.e00, _x.e01, _x.e02, _x.e10, _x.e11, _x.e12, _x.e20, _x.e21, _x.e22))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.e00, _x.e01, _x.e02, _x.e10, _x.e11, _x.e12, _x.e20, _x.e21, _x.e22,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.e00, _x.e01, _x.e02, _x.e10, _x.e11, _x.e12, _x.e20, _x.e21, _x.e22))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.e00, _x.e01, _x.e02, _x.e10, _x.e11, _x.e12, _x.e20, _x.e21, _x.e22,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
